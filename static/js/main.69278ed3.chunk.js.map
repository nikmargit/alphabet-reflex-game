{"version":3,"sources":["hooks/useTimeout.js","hooks/useLetters.js","components/DifficultySelection.js","components/DisplayResults.js","components/InputSection.js","components/Countdown.js","components/Buttons.js","App.js","index.js"],"names":["useTimeout","endRound","useState","timeoutID","setTimeoutID","updatedFn","useRef","useEffect","current","clearTimeout","delay","id","setTimeout","ALPHABET","split","useLetters","letters","setLetters","innitialLetterState","setInnitialLetterState","initialLetters","map","character","index","ordinal","status","DifficultySelection","difficulty","setDifficulty","randomLetter","className","htmlFor","disabled","type","name","value","onChange","target","Number","checked","initialCount","hits","misses","remaining","DisplayResults","correctCount","reduce","obj","objCopy","colorClass","key","toUpperCase","InputSection","handleAnswer","inputRef","focus","onKeyPress","which","String","fromCharCode","select","maxLength","ref","Countdown","count","setCount","setInterval","prevCount","clearInterval","percentage","style","width","Buttons","startNewGame","stopGame","onClick","App","setRandomLetter","initialLetterState","startTimeout","stopTimeout","startNewRound","updatedLetters","filter","letter","length","random","Math","floor","pressedKey","isCorrect","toLowerCase","lettersCopy","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69278ed3.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nconst useTimeout = (endRound) => {\n    const [timeoutID, setTimeoutID] = useState();\n    // we need to use ref to make sure we are handling the right random letter\n    const updatedFn = useRef();\n\n    useEffect(() => {\n        updatedFn.current = endRound;\n    }, [endRound]);\n    // clear timeout on unmout to prevent memory leak\n    useEffect(() => () => clearTimeout(timeoutID), [timeoutID]);\n    // create timeout\n    const startTimeout = (delay) => {\n        let id = setTimeout(() => {\n            updatedFn.current();\n        }, delay);\n        setTimeoutID(id);\n    };\n    // clear timeout\n    const stopTimeout = () => clearTimeout(timeoutID);\n    return [startTimeout, stopTimeout];\n};\n\nexport default useTimeout;\n","import { useEffect, useState } from 'react';\n\nconst ALPHABET = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\nfunction useLetters() {\n    const [letters, setLetters] = useState([]);\n    const [innitialLetterState, setInnitialLetterState] = useState([]);\n\n    useEffect(() => {\n        const initialLetters = ALPHABET.map((character, index) => ({\n            character,\n            ordinal: index + 1,\n            status: null,\n        }));\n        setInnitialLetterState(initialLetters);\n        setLetters(initialLetters);\n    }, []);\n\n    return [letters, setLetters, innitialLetterState];\n}\n\nexport default useLetters;\n","import React from 'react';\n\nfunction DifficultySelection({ difficulty, setDifficulty, randomLetter }) {\n    return (\n        <div className=\"DifficultySelection\">\n            <h5 className=\"subtitle is-6 is-marginless\">Select difficulty:</h5>\n            <div className=\"control\">\n                <label htmlFor=\"easy\" className=\"radio\" disabled={randomLetter}>\n                    <input\n                        type=\"radio\"\n                        id=\"easy\"\n                        name=\"difficulty\"\n                        value={5000}\n                        onChange={({ target }) =>\n                            setDifficulty(Number(target.value))\n                        }\n                        checked={difficulty === 5000}\n                        disabled={randomLetter}\n                    />{' '}\n                    Easy\n                </label>\n                <label\n                    htmlFor=\"normal\"\n                    className=\"radio\"\n                    disabled={randomLetter}\n                >\n                    <input\n                        type=\"radio\"\n                        id=\"normal\"\n                        name=\"difficulty\"\n                        value={3500}\n                        onChange={({ target }) =>\n                            setDifficulty(Number(target.value))\n                        }\n                        checked={difficulty === 3500}\n                        disabled={randomLetter}\n                    />{' '}\n                    Normal\n                </label>\n                <label htmlFor=\"hard\" className=\"radio\" disabled={randomLetter}>\n                    <input\n                        type=\"radio\"\n                        id=\"hard\"\n                        name=\"difficulty\"\n                        value={2500}\n                        onChange={({ target }) =>\n                            setDifficulty(Number(target.value))\n                        }\n                        checked={difficulty === 2500}\n                        disabled={randomLetter}\n                    />{' '}\n                    Hard\n                </label>\n            </div>\n        </div>\n    );\n}\n\nexport default DifficultySelection;\n","import React from 'react';\n\nconst initialCount = { hits: 0, misses: 0, remaining: 0 };\n\nfunction DisplayResults({ letters }) {\n    const correctCount = letters.reduce((obj, { status }) => {\n        const objCopy = { ...obj };\n        if (!status) {\n            objCopy.remaining++;\n        } else if (status === 'HIT') {\n            objCopy.hits++;\n        } else {\n            objCopy.misses++;\n        }\n        return objCopy;\n    }, initialCount);\n\n    const { hits, misses, remaining } = correctCount;\n    return (\n        <div className=\"DisplayResults\">\n            <div className=\"letters\">\n                {letters.map(({ character, ordinal, status }) => {\n                    const colorClass = status\n                        ? status === 'HIT'\n                            ? 'has-text-success'\n                            : 'has-text-danger'\n                        : '';\n                    return (\n                        <h3\n                            key={character}\n                            className={`subtitle is-3 is-inline-block ${colorClass}`}\n                        >\n                            {ordinal}|{character.toUpperCase()}\n                        </h3>\n                    );\n                })}\n            </div>\n            <div className=\"count has-background-light\">\n                <p>\n                    Hit: <span className=\"has-text-success\">{hits}</span>\n                </p>\n                <p>\n                    Miss: <span className=\"has-text-danger\">{misses}</span>\n                </p>\n                <p>Remaining: {remaining}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default DisplayResults;\n","import React, { useEffect, useRef } from 'react';\n\nfunction InputSection({ randomLetter, handleAnswer }) {\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        // focus on input when starting game\n        if (randomLetter) {\n            inputRef.current.focus();\n        } else {\n            // clear input when stopping the game\n            inputRef.current.value = '';\n        }\n    }, [randomLetter]);\n\n    return (\n        <div className=\"InputSection\">\n            <input\n                type=\"text\"\n                name=\"letter\"\n                onKeyPress={({ target, which }) => {\n                    handleAnswer(String.fromCharCode(which));\n                    target.select();\n                }}\n                maxLength={1}\n                ref={inputRef}\n                className=\"input is-primary is-large\"\n                disabled={!randomLetter}\n            />\n            <h2 className=\"title is-2\">\n                {randomLetter && randomLetter.ordinal}\n            </h2>\n        </div>\n    );\n}\n\nexport default InputSection;\n","import React, { useEffect, useState } from 'react';\n\nfunction Countdown({ randomLetter, difficulty }) {\n    const [count, setCount] = useState();\n\n    useEffect(() => {\n        if (randomLetter) {\n            const id = setInterval(() => {\n                setCount((prevCount) => prevCount - 100);\n            }, 100);\n            return () => {\n                clearInterval(id);\n                setCount(difficulty);\n            };\n        }\n    }, [difficulty, randomLetter]);\n\n    useEffect(() => {\n        setCount(difficulty);\n    }, [difficulty]);\n\n    const percentage = (count * 100) / difficulty;\n\n    return (\n        <div className=\"Countdown\">\n            <div className=\"background has-background-grey-light\">\n                <div\n                    className=\"line has-background-primary\"\n                    style={{ width: `${percentage}%` }}\n                ></div>\n            </div>\n        </div>\n    );\n}\n\nexport default Countdown;\n","import React from 'react';\n\nfunction Buttons({ randomLetter, startNewGame, stopGame }) {\n    return (\n        <div>\n            {randomLetter ? (\n                <button className=\"button is-danger\" onClick={stopGame}>\n                    Stop Game\n                </button>\n            ) : (\n                <button onClick={startNewGame} className=\"button is-info\">\n                    Start Game\n                </button>\n            )}\n        </div>\n    );\n}\n\nexport default Buttons;\n","import React, { useState } from 'react';\nimport useTimeout from './hooks/useTimeout';\nimport useLetters from './hooks/useLetters';\nimport DifficultySelection from './components/DifficultySelection';\nimport DisplayResults from './components/DisplayResults';\nimport InputSection from './components/InputSection';\nimport Countdown from './components/Countdown';\nimport Buttons from './components/Buttons';\nimport './App.scss';\n\nfunction App() {\n    const [randomLetter, setRandomLetter] = useState(null);\n    const [difficulty, setDifficulty] = useState(3500);\n    const [letters, setLetters, initialLetterState] = useLetters();\n    const [startTimeout, stopTimeout] = useTimeout(handleAnswer);\n\n    const startNewGame = () => {\n        setLetters(initialLetterState);\n        startNewRound(initialLetterState);\n    };\n\n    const startNewRound = (updatedLetters) => {\n        const remaining = updatedLetters.filter((letter) => !letter.status);\n        if (remaining.length === 0) {\n            return stopGame();\n        }\n        const random = remaining[Math.floor(Math.random() * remaining.length)];\n        setRandomLetter(random);\n        startTimeout(difficulty);\n    };\n\n    function handleAnswer(pressedKey = '') {\n        stopTimeout();\n        const isCorrect = pressedKey.toLowerCase() === randomLetter.character;\n        const lettersCopy = [...letters].map((letter) => {\n            if (letter.character === randomLetter.character) {\n                return {\n                    ...letter,\n                    status: isCorrect ? 'HIT' : 'MISS',\n                };\n            }\n            return letter;\n        });\n        setLetters(lettersCopy);\n        startNewRound(lettersCopy);\n    }\n\n    function stopGame() {\n        stopTimeout();\n        setRandomLetter(null);\n    }\n\n    return (\n        <div className=\"container is-center\">\n            <h1 className=\"title is-1\">Alphabet Reflex Game</h1>\n            <DifficultySelection\n                difficulty={difficulty}\n                setDifficulty={setDifficulty}\n                randomLetter={randomLetter}\n            />\n            <Buttons\n                randomLetter={randomLetter}\n                startNewGame={startNewGame}\n                stopGame={stopGame}\n            />\n            <InputSection\n                randomLetter={randomLetter}\n                handleAnswer={handleAnswer}\n            />\n            <Countdown randomLetter={randomLetter} difficulty={difficulty} />\n            <DisplayResults letters={letters} />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}